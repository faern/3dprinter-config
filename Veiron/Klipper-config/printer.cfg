# This file contains common pin mappings for the BigTreeTech Octopus V1.
# To use this config, the firmware should be compiled for the STM32F446 with a "32KiB bootloader"
# Enable "extra low-level configuration options" and select the "12MHz crystal" as clock reference

# after running "make", copy the generated "klipper/out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the OctoPus with that SD card.

# See docs/Config_Reference.md for a description of parameters.

## Voron Design VORON2 250/300/350mm BigTreeTech OctoPus V1 TMC2209 UART config

## *** THINGS TO CHANGE/CHECK: ***
### MCU paths                            [mcu] section
### Thermistor types                     [extruder] and [heater_bed] sections - See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types
## Z Endstop Switch location            [safe_z_home] section
## Homing end position                  [gcode_macro G32] section
## Z Endstop Switch  offset for Z0      [stepper_z] section
## Probe points                         [quad_gantry_level] section
## Min & Max gantry corner postions     [quad_gantry_level] section
## PID tune                             [extruder] and [heater_bed] sections
### Probe pin                            [probe] section
## Fine tune E steps                    [extruder] section

[include mainsail.cfg]
[include bedfans.cfg]
[include lcd_tweaks.cfg]
[include KAMP_Settings.cfg]
[include TEST_SPEED.cfg]

[mcu]
##  Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
##--------------------------------------------------------------------
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_190009001650335331383520-if00
restart_method: command
##--------------------------------------------------------------------

[mcu EBBCan]
canbus_uuid: 1ef35a405e03

[printer]
kinematics: corexy
# In the Elli's max speed tuning I ended up with no skipping with the parameters:
# SPEED=750 ACCEL=20000 ITERATIONS=50. The recommendation is to remove at least 15% from the measured
# max. I went with 20% lower and settled for velocity 650 and acceleration 16000.
max_velocity: 650
# Input shaper on 2025-07-21 determined that the max accel is 4500 (to be used in slicer for print moves)
# Output from calibrate_shaper.py for X-axis:
#   Fitted shaper 'mzv' frequency = 39.0 Hz (vibrations = 1.3%, smoothing ~= 0.134)
#   To avoid too much smoothing with 'mzv', suggested max_accel <= 4500 mm/sec^2
# Output from calibrate_shaper.py for Y-axis:
#   Fitted shaper '3hump_ei' frequency = 88.2 Hz (vibrations = 0.0%, smoothing ~= 0.105)
#   To avoid too much smoothing with '3hump_ei', suggested max_accel <= 5700 mm/sec^2
max_accel: 16000

max_z_velocity: 30          #Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 350
square_corner_velocity: 5.0

#####################################################################
#   X/Y Stepper Settings
#####################################################################

##  B Stepper - Left
##  Connected to MOTOR_6
##  Endstop connected to DIAG_0
[stepper_x]
step_pin: PE2
dir_pin: PE3
enable_pin: !PD4
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: EBBCan:gpio24
position_min: 0

position_endstop: 352
position_max: 352

homing_speed: 80   #Max 100
homing_retract_dist: 5
homing_positive_dir: true

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_x]
uart_pin: PE1
interpolate: false
run_current: 0.9
sense_resistor: 0.110
stealthchop_threshold: 0 # Run motors in more accurate spreadCycle mode

##  A Stepper - Right
##  Connected to MOTOR_1
##  Endstop connected to DIAG_1
[stepper_y]
step_pin: PG0
dir_pin: PG1
enable_pin: !PF15
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: PG9
position_min: 0
##--------------------------------------------------------------------

# Adjusted for extra depth of TAP. This makes the print head not collide
# with the doors at Y=0
position_endstop: 348
position_max: 348

##--------------------------------------------------------------------
homing_speed: 80  #Max 100
homing_retract_dist: 5
homing_positive_dir: true

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_y]
uart_pin: PD11
interpolate: false
run_current: 0.9
sense_resistor: 0.110
stealthchop_threshold: 0 # Run motors in more accurate spreadCycle mode
 
#####################################################################
#   Z Stepper Settings
#####################################################################

## Z0 Stepper - Front Left
##  Connected to MOTOR_2
##  Endstop connected to DIAG_2
[stepper_z]
step_pin: PF11
dir_pin: PG3
enable_pin: !PG5
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

endstop_pin: probe:z_virtual_endstop
##  Z-position of nozzle (in mm) to z-endstop trigger point relative to print surface (Z0)
##  (+) value = endstop above Z0, (-) value = endstop below
##  Increasing position_endstop brings nozzle closer to the bed
##  After you run Z_ENDSTOP_CALIBRATE, position_endstop will be stored at the very end of your config
#position_endstop: 3.0
##--------------------------------------------------------------------

##  Uncomment below for 350mm build
position_max: 310

##--------------------------------------------------------------------
position_min: -3
homing_speed: 13 # Default was 8. 13 resonates much less (way more quiet)
second_homing_speed: 3
homing_retract_dist: 3

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z]
uart_pin: PC6
interpolate: false
run_current: 0.9
sense_resistor: 0.110
stealthchop_threshold: 0 # Run motors in more accurate spreadCycle mode

##  Z1 Stepper - Rear Left
##  Connected to MOTOR_3
[stepper_z1]
step_pin: PG4
dir_pin: !PC1
enable_pin: !PA0
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z1]
uart_pin: PC7
interpolate: false
run_current: 0.9
sense_resistor: 0.110
stealthchop_threshold: 0 # Run motors in more accurate spreadCycle mode

##  Z2 Stepper - Rear Right
##  Connected to MOTOR_4
[stepper_z2]
step_pin: PF9
dir_pin: PF10
enable_pin: !PG2
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z2]
uart_pin: PF2
interpolate: false
run_current: 0.9
sense_resistor: 0.110
stealthchop_threshold: 0 # Run motors in more accurate spreadCycle mode

##  Z3 Stepper - Front Right
##  Connected to MOTOR_5
[stepper_z3]
step_pin: PC13
dir_pin: !PF0
enable_pin: !PF1
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z3]
uart_pin: PE4
interpolate: false
run_current: 0.9
sense_resistor: 0.110
stealthchop_threshold: 0 # Run motors in more accurate spreadCycle mode


#####################################################################
#   Extruder
#####################################################################
[extruder]
step_pin: EBBCan:gpio18
dir_pin: EBBCan:gpio19
enable_pin: !EBBCan:gpio17
##  Update value below when you perform extruder calibration
##  If you ask for 100mm of filament, but in reality it is 98mm:
##  rotation_distance = <previous_rotation_distance> * <actual_extrude_distance> / 100
##  22.6789511 is a good starting point
rotation_distance: 22.171245374
##  Update Gear Ratio depending on your Extruder Type
##  Use 50:10 for Stealthburner/Clockwork 2
##  Use 50:17 for Afterburner/Clockwork (BMG Gear Ratio)
##  Use 80:20 for M4, M3.1
gear_ratio: 50:10               #BMG Gear Ratio
microsteps: 32
full_steps_per_rotation: 200    #200 for 1.8 degree, 400 for 0.9 degree
nozzle_diameter: 0.400
filament_diameter: 1.75
max_extrude_cross_section: 5

heater_pin: EBBCan:gpio7

# Hotend thermistor. This is for a PT1000 on the SB2209 (RP2040)
sensor_type: MAX31865
sensor_pin: EBBCan:gpio9
spi_software_sclk_pin: EBBCan:gpio10
spi_software_mosi_pin: EBBCan:gpio8
spi_software_miso_pin: EBBCan:gpio11
rtd_nominal_r: 1000
rtd_reference_r: 4300
rtd_num_of_wires: 2

min_temp: 10
max_temp: 300
max_power: 1.0
min_extrude_temp: 170
max_extrude_only_distance: 101

##  Try to keep pressure_advance below 1.0
# The value 0.052 is what I have measured for Filamentum ABS.
# This number is not relevant for other filaments and should
# be correctly configured in the slicer!
pressure_advance: 0.052
##  Default is 0.040, leave stock
#pressure_advance_smooth_time: 0.040

[tmc2209 extruder]
uart_pin: EBBCan:gpio20
interpolate: false
run_current: 0.5
sense_resistor: 0.110
stealthchop_threshold: 999999 # I'm honestly not sure why I run the extruder in stealthchop mode


#####################################################################
#   Bed Heater
#####################################################################

##  SSR Pin - HE1
##  Thermistor - TB
[heater_bed]
heater_pin: PA3
## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
## Use "Generic 3950" for Keenovo heaters
sensor_type: Generic 3950
sensor_pin: PF3
##  Adjust Max Power so your heater doesn't warp your bed. Rule of thumb is 0.4 watts / cm^2 .
max_power: 0.75
min_temp: 0
max_temp: 120


#####################################################################
#   Extra temperature sensors
#####################################################################
[temperature_sensor chamber]
sensor_type: ATC Semitec 104GT-2
sensor_pin: PF5
min_temp: 0
max_temp: 100
gcode_id: C

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 80

[temperature_sensor CAN_toolhead]
sensor_type: Generic 3950
sensor_pin: EBBCan:gpio28
min_temp: 10
max_temp: 95


#####################################################################
#   Extra peripherals
#####################################################################
[adxl345]
cs_pin: EBBCan:gpio1
spi_software_sclk_pin: EBBCan:gpio2
spi_software_mosi_pin: EBBCan:gpio0
spi_software_miso_pin: EBBCan:gpio3
axes_map: z,-y,x

[resonance_tester]
probe_points: 175, 175, 20
accel_chip: adxl345

[input_shaper]
# Actual measurement values added at the bottom by SHAPER_CALIBRATE + SAVE_CONFIG


# Corrects mechanical skew in the printer. I'm using the Califlower method
# https://www.klipper3d.org/Skew_Correction.html
[skew_correction]


[filament_motion_sensor filament_sensor]
# The minimum length of filament pulled through the sensor to trigger
# a state change on the switch_pin. Default is 7 mm.
# This can be adjusted to your desired level of sensitivity. 10 is a recomended value to prevent flow dropoff false triggers.
detection_length: 10.0
# The name of the extruder section this sensor is associated with. This parameter must be provided.
extruder: extruder
# The pin on which the switch is connected. This parameter must be provided.
switch_pin: ^PG11 #P1.26

# When set to True, a PAUSE will execute immediately after a runout
# is detected. Note that if pause_on_runout is False and the
# runout_gcode is omitted then runout detection is disabled. Default
# is True.
pause_on_runout: True

# A list of G-Code commands to execute after a filament runout is
# detected. See docs/Command_Templates.md for G-Code format. If
# pause_on_runout is set to True this G-Code will run after the
# PAUSE is complete. The default is not to run any G-Code commands.
# can run macro: FILAMENT_RUNOUT
runout_gcode:
    LCDRGB R=1 G=0 B=0  ; Turn LCD red
    M117 Filament runout!
    PAUSE
    BEEP I=12

# A list of G-Code commands to execute after a filament insert is
# detected. See docs/Command_Templates.md for G-Code format. The
# default is not to run any G-Code commands, which disables insert
# detection.
#insert_gcode:

# The minimum amount of time in seconds to delay between events.
# Events triggered during this time period will be silently
# ignored. The default is 3 seconds.
event_delay: 3.

# The amount of time to delay, in seconds, between the pause command
# dispatch and execution of the runout_gcode. It may be useful to
# increase this delay if OctoPrint exhibits strange pause behavior.
# Default is 0.5 seconds.
pause_delay: 0.5

[delayed_gcode DISABLEFILAMENTSENSOR] ; This will disable the SFS 1 second after klipper starts
initial_duration: 1
gcode:
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro FILAMENT_SENSOR_ENABLE] ; Add this to PRINT_START
description: Enable smart filament sensor
gcode:
    M117 ENABLING the Smart Filament Sensor
    G92 E0 ; Set extruder position to zero
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1

[gcode_macro FILAMENT_SENSOR_DISABLE] ; Add this to PRINT_END and PRINT_CANCEL
description: Disable smart filament sensor
gcode:
    M117 DISABLING the Smart Filament Sensor
    G92 E0 ; Set extruder position to zero
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

#####################################################################
#   Probe
#####################################################################

[probe]
pin: ^EBBCan:gpio22

x_offset: 0
y_offset: 0
# The z_offset is the distance between the nozzle and bed when the probe triggers
#z_offset: 0 # Set by PROBE_CALIBRATE at the bottom
speed: 10.0
samples: 3
samples_result: median
sample_retract_dist: 3.0
samples_tolerance: 0.006
#samples_tolerance: 0.02 # Changed from 0.006 since I got "Probe samples exceed samples_tolerance" errors
samples_tolerance_retries: 3

activate_gcode:
    # This G-code will allow you to probe cold, but will also prevent you from probing with a nozzle at printing temperature
    # (to try to preserve your build surface).
    {% set PROBE_TEMP = 150 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}

#####################################################################
#   Fan Control
#####################################################################

##  Print Cooling Fan - FAN0
[fan]
pin: EBBCan:gpio13
kick_start_time: 0.5
##  Depending on your fan, you may need to increase this value
##  if your fan will not start. Can change cycle_time (increase)
##  if your fan is not able to slow down effectively
off_below: 0.10


##  Hotend Fan - FAN1
[heater_fan hotend_fan]
pin: EBBCan:gpio14
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0
##  If you are experiencing back flow, you can reduce fan_speed
#fan_speed: 1.0

[multi_pin my_controller_fan_pins]
pins: PD12, PD13

##  Controller fan - FAN2
[controller_fan controller_fan]
pin: multi_pin:my_controller_fan_pins
kick_start_time: 0.5
fan_speed: 0.5
heater: heater_bed

##  Exhaust fan - FAN3
#[heater_fan exhaust_fan]
#pin: PD13
#max_power: 1.0
#shutdown_speed: 0.0
#kick_start_time: 5.0
#heater: heater_bed
#heater_temp: 60
#fan_speed: 1.0

#####################################################################
#   LED Control
#####################################################################

## Chamber Lighting - HE2 Connector (Optional)
#[output_pin caselight]
#pin: PB10
#pwm:true
#shutdown_value: 0
#value:1
#cycle_time: 0.01

#####################################################################
#   Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
timeout: 1800

[safe_z_home]
# XY Location of the Z Endstop Switch
# Center of the build plate for TAP since that's where it should run this
home_xy_position:175,175
speed:150
z_hop:10

##  Use QUAD_GANTRY_LEVEL to level a gantry.
##  Min & Max gantry corners - measure from nozzle at MIN (0,0) and 
##  MAX (250, 250), (300,300), or (350,350) depending on your printer size
##  to respective belt positions
[quad_gantry_level]
gantry_corners:
   -60,-10
   410,420
points:
   50,25
   50,275
   300,275
   300,25

speed: 400
horizontal_move_z: 10
retries: 5
retry_tolerance: 0.0075
max_adjust: 10

# Enable object exclusion
[exclude_object]

# Enable PAUSE/RESUME commands (Used for M600 filament change for example)
[pause_resume]

########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<5V>

#####################################################################
#   Displays
#####################################################################

##  mini12864 LCD Display
[display]
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
contrast: 63
spi_software_miso_pin: EXP2_1
spi_software_mosi_pin: EXP2_6
spi_software_sclk_pin: EXP2_2

##  To control Neopixel RGB in mini12864 display
[neopixel btt_mini12864]
pin: EXP1_6
chain_count: 3
initial_RED: 0.1
initial_GREEN: 0.5
initial_BLUE: 0.0
color_order: RGB

##  Set RGB values on boot up for each Neopixel. 
##  Index 1 = display, Index 2 and 3 = Knob
[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
    RESETRGB

#--------------------------------------------------------------------

[neopixel hotend_rgb]
pin: EBBCan:gpio16
chain_count: 3
initial_RED: 1.0
initial_GREEN: 1.0
initial_BLUE: 1.0

# See BEEP macro for how to beep
[output_pin beeper]
pin: EXP1_1
value: 0
shutdown_value: 0
pwm: True
cycle_time: 0.0005 ; Default beeper tone in kHz. 1 / 0.0005 = 2000Hz (2kHz)

# Bed mesh leveling config. Not really used now when KAMP adaptive probing is active
[bed_mesh]
speed: 400
horizontal_move_z: 10
mesh_min: 40, 40
mesh_max: 310,310
fade_start: 0.6
fade_end: 10.0
probe_count: 5,5 # Values should be odd, so one point is directly at bed center
algorithm: bicubic
zero_reference_position: 175, 175

#####################################################################
#   Macros
#####################################################################
[gcode_macro IDLE_TIMEOUT_DISABLE]
gcode:
    SET_IDLE_TIMEOUT TIMEOUT=9999999

[gcode_macro IDLE_TIMEOUT_RESET]
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value

[gcode_macro PARK]
gcode:
    {% set th = printer.toolhead %}
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30  

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    BED_MESH_CLEAR
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    PARK
    RESTORE_GCODE_STATE NAME=STATE_G32

# Sets the Z offset linearly interpolated between two calibrations. One made on a heatsoaked printer
# and one on a room temperature printer.
# The printer expands when the aluminum extrusions heats up. So the hotter the printer the more I need
# to lower Z. The machine's default z_offset is calibrated with PLA on a "cold" printer. Then this macro
# lowers the z_offset the hotter the chamber is when this macro runs.
[gcode_macro SET_TEMP_BASED_Z_OFFSET]
gcode:
    # The Z offset diff for optimal first layer squish between the cold calibration and the hot calibration.
    {% set HOT_Z_OFFSET_DIFF = -0.06 %}
    # The temperature where the linear interpolation starts.
    # A chamber temp below this sets Z temporary offset to 0 (printer default offset)
    {% set COLD_CALIBRATION_TEMP = 25.0 %}
    # The temperature the chamber had when calibrating the machine's fully heat soaked z_offset
    # A chamber temp above this at start sets z_offset=HOT_Z_OFFSET_DIFF
    {% set WARM_CALIBRATION_TEMP = 60.0 %}

    {% set CHAMBER_TEMP = printer["temperature_sensor chamber"].temperature %}

    {% if CHAMBER_TEMP <= COLD_CALIBRATION_TEMP %}
      {% set NEW_Z_OFFSET = 0.0 %}
    {% elif CHAMBER_TEMP >= WARM_CALIBRATION_TEMP %}
      {% set NEW_Z_OFFSET = HOT_Z_OFFSET_DIFF %}
    {% else %}
      {% set CHAMBER_TEMP_RATIO = (CHAMBER_TEMP - COLD_CALIBRATION_TEMP) / (WARM_CALIBRATION_TEMP - COLD_CALIBRATION_TEMP) %}
      {% set NEW_Z_OFFSET = CHAMBER_TEMP_RATIO * HOT_Z_OFFSET_DIFF %}
    {% endif %}

    { action_respond_info('Adjusting Z offset to %.3f due to chamber temp being %.1fC' % (NEW_Z_OFFSET, CHAMBER_TEMP)) }
    SET_GCODE_OFFSET Z={NEW_Z_OFFSET} MOVE=1

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    # Parameters
    {% set BED_TEMP = params.BED|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER|float %}
    {% set TARGET_CHAMBER_TEMP = params.CHAMBER|default(0.0)|float %}
    {% set FILAMENT_TYPE = params.FILAMENT|default("PLA")|string %}

    {% set CURRENT_CHAMBER_TEMP = printer["temperature_sensor chamber"].temperature %}

    RESETRGB                       ; reset LCD color
    BED_MESH_CLEAR
    CLEAR_PAUSE
    #SET_GCODE_OFFSET Z=0
    M221 S100 ; Set Flow percentage (100%)
    M220 S100 ; Set feedrate percentage (100%)
    G90                            ; absolute positioning

    G1 Z20 F3000                   ; move nozzle away from bed
    
    {% if EXTRUDER_TEMP > 145 %}
      M104 S145 # Start heating the hot end in parallel with the bed, but at a safe temperature
    {% else %}
      M104 S{EXTRUDER_TEMP}
    {% endif %}
    M117 Heating bed
    M190 S{BED_TEMP}            ; set and wait for bed to reach temp

    {% if CURRENT_CHAMBER_TEMP < TARGET_CHAMBER_TEMP %}
      { action_respond_info('Heat soaking chamber to %.1fC for %s' % (TARGET_CHAMBER_TEMP, FILAMENT_TYPE)) }
      M117 Heat soaking
      BEDFANSFAST               ; Circulating the air in the chamber warms it up way faster
      TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={TARGET_CHAMBER_TEMP} ; Wait for chamber temp
    {% endif %}

    BEDFANSSLOW                 ; Run the bed fans slowly during the entire print to capture VOCs

    M117 Leveling gantry
    G28
    QUAD_GANTRY_LEVEL
    M117 Measure bed
    G28
    BED_MESH_CALIBRATE

    SMART_PARK                  ; Use smart parking from KAMP. Parks near print object prior to heating

    SKEW_PROFILE LOAD=CaliFlower ; Load skew profile to correct for mechancal skew

    #SET_TEMP_BASED_Z_OFFSET    ; Adjust Z to match heat expansion of printer
    M117 Heating Nozzle
    M109 S{EXTRUDER_TEMP}       ; set and wait for hot end to reach temp. Do this after probing since probing lowers the temp

    FILAMENT_SENSOR_ENABLE
    M117 Purging
    LINE_PURGE                  ; Use adaptive purge line from KAMP. Purges near the print object
    M117 Print started


[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [[th.position.z + 20, 150]|max, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    SET_SKEW CLEAR=1
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament

    TURN_OFF_HEATERS
    BEDFANSFAST                    ; Run the bed fans. Both to cool down the bed faster, but also to clear out VOCs

    FILAMENT_SENSOR_DISABLE
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    LCDRGB R=0 G=1 B=0  ; Turn LCD green
    M117 Print finished!

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    #SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT
    M117 Print cancelled

# Purges a line at the front of the build plate.
# Not really used when KAMP adaptive purge line macro is in use
[gcode_macro PURGE_LINE]
gcode:
    {% set rand_pos = (20 + ( printer.system_stats.cputime * 1000 ) % 50) %} ; Generate pseudo random start pos so we dont wear out that one spot on the bed.
    M117 Purging at X{ rand_pos }

    # The start pos will be within the "handle" of the flex plate where there is some extra Y space available so we can go all the way to Y0
    # If your setup does not have this extra space then just increase the y valie in the line "G1 X{ rand_pos } Y0 Z1 F18000"
    G92 E0                          ; zero the extruder
    G90                             ; absolute positioning
    G1 X{ rand_pos } Y0 Z1 F18000   ; Go to start pos for perge line
    G1 Z0.3 F600                    ; Lower to purge height
    G91                             ; relative positioning
    M106 P0                         ; Enable Cooling Fan
    G1 X5 E1 F200                   ; Start extruding and move slowly
    G1 X100 E15 F500                ; 100mm extrude move to help with stringing
    G1 X50 E-1 F6000                ; Fast move and retract to break strings and reduce ooze
    G1 Z1 F600                      ; Lift
    M106 P0 S0                      ; Disable Cooling Fan
    G92 E0                          ; zero the extruder
    G90                             ; absolute positioning

######################################################################
# Pause and Filament Change
######################################################################

# M600: Filament Change. After filament has been changed, the print can
# be resumed from its previous position with the "RESUME" gcode.
# Inspiration from Ellis among others.
# https://github.com/AndrewEllis93/Print-Tuning-Guide/blob/040d31c6daaed23c2a1a353545e7ee442a232f32/articles/useful_macros.md#m600-filament-change-alias
[gcode_macro M600]
gcode:
    LCDRGB R=0 G=0 B=1  ; Turn LCD blue
    PAUSE Z=50         ; Run pause code, but with a high Z hop amount to leave some room for filament change work
    BEEP I=3 DUR=500

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        FILAMENT_SENSOR_DISABLE                                                              ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}

    {% if printer['pause_resume'].is_paused|int == 1 %}
        FILAMENT_SENSOR_ENABLE                                                      ; enable filament sensor
        RESETRGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

######################################################################
# LEDs/display/beep and user interaction
######################################################################

[gcode_macro BEEP]
gcode:
    # Parameters
    {% set i = params.I|default(1)|int %}           ; Iterations (number of times to beep).
    {% set dur = params.DUR|default(100)|int %}     ; Duration/wait of each beep in ms. Default 100ms.
    {% set freq = params.FREQ|default(2000)|int %}  ; Frequency in Hz. Default 2kHz.

    {% for iteration in range(i|int) %}
        SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
        G4 P{dur}
        SET_PIN PIN=beeper VALUE=0
        G4 P{dur}
    {% endfor %}

# M300 is built in beep gcode
[gcode_macro M300]
gcode:
  {% set S = params.S|default(1000)|int %}
  {% set P = params.P|default(100)|int %}
      SET_PIN PIN=beeper VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
  G4 P{P}
      SET_PIN PIN=beeper VALUE=0

##  Index 1 = display, Index 2 and 3 = Knob
[gcode_macro LCDRGB]
gcode:
    {% set r = params.R|default(1)|float %}
    {% set g = params.G|default(1)|float %}
    {% set b = params.B|default(1)|float %}

    SET_LED LED=btt_mini12864 RED={r} GREEN={g} BLUE={b} INDEX=1 TRANSMIT=0
    SET_LED LED=btt_mini12864 RED={r} GREEN={g} BLUE={b} INDEX=2 TRANSMIT=0
    SET_LED LED=btt_mini12864 RED={r} GREEN={g} BLUE={b} INDEX=3

[gcode_macro RESETRGB]
gcode:
    LCDRGB r=1.0 g=0.3 b=0.1

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 22.142
#*# pid_ki = 1.716
#*# pid_kd = 71.407
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 45.431
#*# pid_ki = 2.089
#*# pid_kd = 247.030
#*#
#*# [probe]
#*# z_offset = -1.800
#*#
#*# [input_shaper]
#*# shaper_type_x = 3hump_ei
#*# shaper_freq_x = 84.8
#*# shaper_type_y = mzv
#*# shaper_freq_y = 37.4
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  -0.042500, 0.010000, 0.015000, -0.015000, -0.023750
#*# 	  -0.068750, -0.015000, -0.021250, -0.037500, -0.040000
#*# 	  -0.057500, -0.000000, 0.000000, -0.021250, -0.035000
#*# 	  -0.053750, -0.002500, -0.005000, -0.028750, -0.030000
#*# 	  0.007500, 0.051250, 0.050000, 0.018750, 0.001250
#*# x_count = 5
#*# y_count = 5
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = lagrange
#*# tension = 0.2
#*# min_x = 40.0
#*# max_x = 310.0
#*# min_y = 40.0
#*# max_y = 310.0
#*#
#*# [skew_correction CaliFlower]
#*# xy_skew = 0.005002533854240956
#*# xz_skew = 0.0
#*# yz_skew = 0.0
